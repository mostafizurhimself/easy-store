<?php

namespace {{ namespace }};

use Illuminate\Auth\Access\HandlesAuthorization;
use {{ namespacedModel }};
use {{ namespacedUserModel }};

class {{ class }}
{
    use HandlesAuthorization;

    /**
     * Determine whether the user can view any models.
     *
     * @param  \{{ namespacedUserModel }}  $user
     * @return mixed
     */
    public function viewAny({{ user }} $user)
    {
        return $user->isSuperAdmin() || $user->hasPermissionTo('view any permissions');
    }

    /**
     * Determine whether the user can view the model.
     *
     * @param  \{{ namespacedUserModel }}  $user
     * @param  \{{ namespacedModel }}  ${{ modelVariable }}
     * @return mixed
     */
    public function view({{ user }} $user, {{ model }} ${{ modelVariable }})
    {
        return $user->isSuperAdmin() ||
                ($user->hasPermissionTo('view permissions') && $user->locationId == ${{ modelVariable }}->locationId ) ||
                $user->hasPermissionTo('view all locations data');
    }

    /**
     * Determine whether the user can create models.
     *
     * @param  \{{ namespacedUserModel }}  $user
     * @return mixed
     */
    public function create({{ user }} $user)
    {
        return $user->isSuperAdmin() || $user->hasPermissionTo('create permissions');
    }

    /**
     * Determine whether the user can update the model.
     *
     * @param  \{{ namespacedUserModel }}  $user
     * @param  \{{ namespacedModel }}  ${{ modelVariable }}
     * @return mixed
     */
    public function update({{ user }} $user, {{ model }} ${{ modelVariable }})
    {
        return $user->isSuperAdmin() ||
                ($user->hasPermissionTo('update permissions') && $user->locationId == ${{ modelVariable }}->locationId ) ||
                $user->hasPermissionTo('update all locations data');
    }

    /**
     * Determine whether the user can delete the model.
     *
     * @param  \{{ namespacedUserModel }}  $user
     * @param  \{{ namespacedModel }}  ${{ modelVariable }}
     * @return mixed
     */
    public function delete({{ user }} $user, {{ model }} ${{ modelVariable }})
    {
        return $user->isSuperAdmin() ||
                ($user->hasPermissionTo('delete permissions') && $user->locationId == ${{ modelVariable }}->locationId ) ||
                $user->hasPermissionTo('delete all locations data');
    }

    /**
     * Determine whether the user can restore the model.
     *
     * @param  \{{ namespacedUserModel }}  $user
     * @param  \{{ namespacedModel }}  ${{ modelVariable }}
     * @return mixed
     */
    public function restore({{ user }} $user, {{ model }} ${{ modelVariable }})
    {
        return $user->isSuperAdmin() ||
                ($user->hasPermissionTo('restore permissions') && $user->locationId == ${{ modelVariable }}->locationId ) ||
                $user->hasPermissionTo('restore all locations data');
    }

    /**
     * Determine whether the user can permanently delete the model.
     *
     * @param  \{{ namespacedUserModel }}  $user
     * @param  \{{ namespacedModel }}  ${{ modelVariable }}
     * @return mixed
     */
    public function forceDelete({{ user }} $user, {{ model }} ${{ modelVariable }})
    {
        return $user->isSuperAdmin() ||
                ($user->hasPermissionTo('force delete permissions') && $user->locationId == ${{ modelVariable }}->locationId ) ||
                $user->hasPermissionTo('force delete all locations data');
    }

    /**
     * Determine whether the user can add a model item to the model.
     *
     * @param  \{{ namespacedUserModel }}  $user
     * @param  \{{ namespacedModel }}  ${{ modelVariable }}
     * @return mixed
     */
    public function addModel({{ user }} $user, {{ model }} ${{ modelVariable }})
    {
        return true;
    }
}
